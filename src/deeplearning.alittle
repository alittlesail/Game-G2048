
register namespace deeplearning;

public class DeeplearningModel
{
    // 加载与保存
    public fun Load(string model_path) : bool {}
    public fun Save(string model_path) {}

    // 开始训练
    public fun StartTraining() {}
    // 结束训练
    public fun StopTraining() {}

    // 获取数据
    public fun HandleEvent() {}
    // 是否还有数据
    public fun HasResult() : bool {}
    // 获取loss
    public fun GetLoss() : double {}
    // 获取是否正确
    public fun GetRight() : bool {}

    // 获取训练总数
    public fun GetTotalTrainCount() : int {}
    // 获取当前已训练数量
    public fun GetCurTrainCount() : int {}
    // 获取第几轮
    public fun GetTrainRound() : int {}
    // 获取当前正确数量
    public fun GetCurRightCount() : int {}
}

// 异或
public class DeeplearningXorModel : DeeplearningModel
{
    // x1，x2 都是取值1或者-1
    // 当同号时返回1，异号时返回0
    public fun Output(double x1, double x2) : double {}
}

// Mnist
public class DeeplearningMnistModel : DeeplearningModel
{
    // mnist_root mnist训练数据的根路径
    public fun SetMnistRoot(string mnist_root) {}
    // 输入表面，然后预测0-9的数字
    public fun Output(int surface) : int {}
}

// 中文语音识别
public class DeeplearningSpeechModel : DeeplearningModel
{
    // word_data_path 由Wav2MFCC输出的word_out_path
	public ctor(string word_data_path) {}

    // desc_path 语言资料的描述文件
    // 第一行 wav文件名 C19_623.wav
    // 第二行 中文结果
    // 第三行 每个字的拼音
    // 第四行 辅音，元音
    // wav_base_path 语音文件的根路径
    // max_count 最大数量
    // word_out_path 输出标记数据
    // speech_out_path 输出MFCC的数据
    public fun Wav2MFCC(string desc_path, string wav_base_path, int max_count, string word_out_path, string speech_out_path) : bool {}

    // mfcc_path 由Wav2MFCC输出的speech_out_path
    public fun SetSpeechDataPath(string mfcc_path) {}

    // file_path wav的语音文件路径，采样率必须是16000，单声道
    // 返回拼音
    public fun Output(string file_path) : string {}
}

// DQN DNN
public class DeeplearningDqnDnnModel : DeeplearningModel
{
    // state_count 状态个数
    // action_count 操作个数
    public ctor(int state_count, int action_count, int hide_dim, int memory_capaticy) {}

    // state 是当前的状态向量
    // 返回一个action
    public fun ChooseAction(List<double> state) : int {}

    // 保存经验
    public fun SaveTransition(List<double> state, int action, double reward, List<double> next_state) {}

    // 开始学习
    public fun Learn() : double {}
}

// DQN CNN
public class DeeplearningDqnCnnModel : DeeplearningModel
{
    // input_len 状态个数
    // action_count 操作个数
    public ctor(int input_len, int action_count, int memory_capaticy) {}

    // state 是当前的状态向量
    // 返回一个action
    public fun ChooseAction(List<double> state) : int {}

    // 保存经验
    public fun SaveTransition(List<double> state, int action, double reward, List<double> next_state) {}

    // 开始学习
    public fun Learn() : double {}
}